name: daily-report

on:
  schedule:
    - cron: "30 0 * * *"   # 07:30 น. ไทย (0:30 UTC)
  workflow_dispatch:

# ✅ ให้สิทธิ์ที่ Pages ต้องใช้
permissions:
  contents: read
  pages: write
  id-token: write

# ✅ กันชนกันเวลามีรันซ้อน
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Bangkok
      RUN_MARKER: "รันเสร็จแล้ว:"
      NOTEBOOK_IN: "WFO_Test_no_write.ipynb"   # ให้ตรงชื่อไฟล์จริง
      NOTEBOOK_EXEC: "/tmp/WFO_executed.ipynb"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files (debug)
        run: ls -lah

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute notebook with papermill
        run: |
          papermill "${NOTEBOOK_IN}" "${NOTEBOOK_EXEC}" -k python3 -p RUN_MARKER "${RUN_MARKER}"

      - name: Verify execution & marker
        run: |
          python - <<'PY'
          import json, os, sys
          nb_path = os.environ["NOTEBOOK_EXEC"]
          marker  = os.environ["RUN_MARKER"]
          with open(nb_path, "r", encoding="utf-8") as f:
              nb = json.load(f)
          counts = [c.get("execution_count") for c in nb.get("cells", []) if c.get("cell_type")=="code"]
          if not any(c is not None for c in counts):
              sys.exit("ERROR: notebook not executed.")
          def text_from_output(o):
              if isinstance(o, dict):
                  if 'text' in o and o['text']:
                      return o['text'] if isinstance(o['text'], str) else ''.join(o['text'])
                  data=o.get('data',{})
                  for m in ('text/markdown','text/plain','text/html'):
                      if m in data and data[m]:
                          v=data[m]
                          return v if isinstance(v,str) else ''.join(v)
              return ''
          big=[]
          for c in nb.get("cells", []):
              if c.get("cell_type")=="markdown":
                  src=c.get("source", [])
                  big.append(''.join(src) if isinstance(src, list) else str(src))
              elif c.get("cell_type")=="code":
                  for o in c.get("outputs", []):
                      big.append(text_from_output(o))
          if marker not in '\n'.join(big):
              sys.exit(f"ERROR: marker '{marker}' not found.")
          print("Notebook executed OK.")
          PY

      - name: Convert executed notebook to HTML (hide code)
        run: |
          mkdir -p docs
          jupyter nbconvert --to html --TemplateExporter.exclude_input=True \
            "${NOTEBOOK_EXEC}" --output index.html --output-dir docs

      # ✅ เตรียมสภาพแวดล้อม Pages
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # ✅ อัปโหลดไฟล์ที่จะแสดงผลเป็น artifact 'github-pages'
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # ✅ ใช้ artifact จากขั้นตอน build เพื่อสร้าง deployment
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
